/*
 * This file is generated by jOOQ.
 */
package lv.twino.homework.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lv.twino.homework.jooq.Indexes;
import lv.twino.homework.jooq.Keys;
import lv.twino.homework.jooq.Public;
import lv.twino.homework.jooq.tables.records.BlacklistRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Blacklist extends TableImpl<BlacklistRecord> {

    private static final long serialVersionUID = 1178580433;

    /**
     * The reference instance of <code>PUBLIC.BLACKLIST</code>
     */
    public static final Blacklist BLACKLIST = new Blacklist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlacklistRecord> getRecordType() {
        return BlacklistRecord.class;
    }

    /**
     * The column <code>PUBLIC.BLACKLIST.PERSONAL_ID</code>.
     */
    public final TableField<BlacklistRecord, String> PERSONAL_ID = createField("PERSONAL_ID", org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.BLACKLIST</code> table reference
     */
    public Blacklist() {
        this(DSL.name("BLACKLIST"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.BLACKLIST</code> table reference
     */
    public Blacklist(String alias) {
        this(DSL.name(alias), BLACKLIST);
    }

    /**
     * Create an aliased <code>PUBLIC.BLACKLIST</code> table reference
     */
    public Blacklist(Name alias) {
        this(alias, BLACKLIST);
    }

    private Blacklist(Name alias, Table<BlacklistRecord> aliased) {
        this(alias, aliased, null);
    }

    private Blacklist(Name alias, Table<BlacklistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Blacklist(Table<O> child, ForeignKey<O, BlacklistRecord> key) {
        super(child, key, BLACKLIST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BlacklistRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BlacklistRecord>> getKeys() {
        return Arrays.<UniqueKey<BlacklistRecord>>asList(Keys.CONSTRAINT_F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Blacklist as(String alias) {
        return new Blacklist(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Blacklist as(Name alias) {
        return new Blacklist(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Blacklist rename(String name) {
        return new Blacklist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Blacklist rename(Name name) {
        return new Blacklist(name, null);
    }
}
